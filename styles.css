// script.js — robust add-to-cart with event delegation
document.addEventListener("DOMContentLoaded", () => {
  // Data produits
  const PRODUCTS = [
    { id: "ap4", name: "AirPods 4", price: 50.00, image: "images/airpods4.jpg" },
    { id: "appro2", name: "AirPods Pro 2", price: 55.00, image: "images/airpodspro2.jpg" }
  ];

  // Selecteurs
  const productGrid = document.getElementById("product-grid");
  const cartPanel = document.getElementById("cart-panel");
  const openCartBtn = document.getElementById("open-cart");
  const closeCartBtn = document.getElementById("close-cart");
  const cartItemsEl = document.getElementById("cart-items");
  const subtotalEl = document.getElementById("subtotal");
  const taxEl = document.getElementById("tax");
  const totalEl = document.getElementById("total");
  const cartCountEl = document.getElementById("cart-count");
  const checkoutBtn = document.getElementById("checkout-btn");
  const toast = document.getElementById("toast");

  // State
  let cart = JSON.parse(localStorage.getItem("ns_cart") || "[]");

  // Render des produits (dynamiquement)
  function renderProducts(){
    productGrid.innerHTML = "";
    PRODUCTS.forEach(p => {
      const card = document.createElement("div");
      card.className = "product-card";
      card.innerHTML = `
        <img src="${p.image}" alt="${p.name}">
        <h3>${p.name}</h3>
        <p>${p.name === "AirPods 4" ? "Écouteurs sans fil nouvelle génération." : "Réduction de bruit active, qualité studio."}</p>
        <div class="price">${p.price.toFixed(2)} €</div>
        <button class="btn add-to-cart" data-id="${p.id}">Ajouter au panier</button>
      `;
      productGrid.appendChild(card);
    });
    console.log("Produits affichés :", PRODUCTS.length);
  }

  // Util : sauvegarder et charger
  function saveCart(){ localStorage.setItem("ns_cart", JSON.stringify(cart)); }
  function loadCart(){ cart = JSON.parse(localStorage.getItem("ns_cart") || "[]"); }

  // Ajouter au panier par id
  function addToCartById(id){
    const prod = PRODUCTS.find(p => p.id === id);
    if(!prod){ console.warn("Produit introuvable:", id); return; }
    const entry = cart.find(c => c.id === id);
    if(entry) entry.qty++;
    else cart.push({ id: prod.id, name: prod.name, price: prod.price, qty: 1 });
    saveCart();
    updateCartUI();
    showToast(`${prod.name} ajouté au panier`);
  }

  // Supprimer item (par index)
  function removeFromCart(index){
    if(index < 0 || index >= cart.length) return;
    cart.splice(index, 1);
    saveCart();
    updateCartUI();
  }

  // Update UI du panier
  function updateCartUI(){
    cartItemsEl.innerHTML = "";
    let subtotal = 0;
    cart.forEach((c, i) => {
      subtotal += c.price * c.qty;
      const li = document.createElement("li");
      li.innerHTML = `<span>${c.name} × ${c.qty}</span><span>${(c.price*c.qty).toFixed(2)} € <button class="remove-item" data-index="${i}">Suppr</button></span>`;
      cartItemsEl.appendChild(li);
    });
    const taxRate = 0.02;
    const tax = Math.round(subtotal * taxRate * 100) / 100;
    const total = Math.round((subtotal + tax) * 100) / 100;
    subtotalEl.textContent = subtotal.toFixed(2) + " €";
    taxEl.textContent = tax.toFixed(2) + " €";
    totalEl.textContent = total.toFixed(2) + " €";
    cartCountEl.textContent = cart.reduce((s, it) => s + it.qty, 0);
  }

  // Toast simple
  function showToast(msg, ms = 1400){
    toast.textContent = msg;
    toast.classList.remove("hidden");
    toast.style.opacity = "1";
    setTimeout(()=> {
      toast.style.opacity = "0";
      setTimeout(()=> toast.classList.add("hidden"), 300);
    }, ms);
  }

  // Event delegation : ajouter au panier
  productGrid.addEventListener("click", (e) => {
    const btn = e.target.closest(".add-to-cart");
    if(!btn) return;
    const id = btn.dataset.id;
    addToCartById(id);
  });

  // Event delegation : supprimer item dans le panier
  cartItemsEl.addEventListener("click", (e) => {
    const rem = e.target.closest(".remove-item");
    if(!rem) return;
    const idx = parseInt(rem.dataset.index, 10);
    removeFromCart(idx);
  });

  // Open / close cart
  openCartBtn.addEventListener("click", () => cartPanel.classList.toggle("hidden"));
  if(closeCartBtn) closeCartBtn.addEventListener("click", () => cartPanel.classList.add("hidden"));

  // Checkout redirection
  checkoutBtn.addEventListener("click", () => {
    // Save cart under ns_cart key (already saved) — redirect
    window.location.href = "checkout.html";
  });

  // Init
  renderProducts();
  loadCart();
  updateCartUI();

  // Expose for debugging
  window._ns = { addToCartById, cart, PRODUCTS };

  console.log("script.js chargé — event delegation active");
});
