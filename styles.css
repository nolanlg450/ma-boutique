/* NovaShop - script.js
   Remplace TON_CLIENT_ID dans index.html par ton Client ID PayPal (sandbox pour tester).
*/

/* Produits (prix en centimes) */
const PRODUCTS = [
  { id: "ap4", title: "AirPods 4", price_cents: 5000, img: "https://picsum.photos/seed/airpods4/600/400" },
  { id: "appro2", title: "AirPods Pro 2", price_cents: 5500, img: "https://picsum.photos/seed/airpodspro2/600/400" }
];

/* Stockage local */
const USERS_KEY = "novashop_users_v1";
const SESSION_KEY = "novashop_session_v1";
const ORDERS_KEY = "novashop_orders_v1";
let cart = [];
let currentUser = loadSession();

/* ---------- DOM refs ---------- */
const storeSection = document.getElementById("store-section");
const cartSection = document.getElementById("cart-section");
const cartCountSpan = document.getElementById("cart-count");
const cartItemsDiv = document.getElementById("cart-items");
const subtotalEl = document.getElementById("subtotal");
const taxEl = document.getElementById("tax");
const totalEl = document.getElementById("total");
const userArea = document.getElementById("user-area");

/* Auth elements */
const showLoginBtn = document.getElementById("show-login");
const showRegBtn = document.getElementById("show-register");
const loginPanel = document.getElementById("login-panel");
const registerPanel = document.getElementById("register-panel");
const loginBtn = document.getElementById("login-btn");
const registerBtn = document.getElementById("register-btn");
const loginMsg = document.getElementById("login-msg");
const regMsg = document.getElementById("reg-msg");

/* Nav buttons */
document.getElementById("btn-view-store").addEventListener("click", ()=> { storeSection.scrollIntoView({behavior:"smooth"}); });
document.getElementById("btn-view-cart").addEventListener("click", ()=> { cartSection.classList.toggle("hidden"); cartSection.scrollIntoView({behavior:"smooth"}); });

/* Auth tabs */
showLoginBtn.addEventListener("click", ()=> { showLogin(); });
showRegBtn.addEventListener("click", ()=> { showRegister(); });

function showLogin(){ showLoginBtn.classList.add("active"); showRegBtn.classList.remove("active"); loginPanel.classList.remove("hidden"); registerPanel.classList.add("hidden"); }
function showRegister(){ showRegBtn.classList.add("active"); showLoginBtn.classList.remove("active"); registerPanel.classList.remove("hidden"); loginPanel.classList.add("hidden"); }

/* ---------- Auth functions (client-side, not secure for production) ---------- */
function loadUsers(){
  try{ return JSON.parse(localStorage.getItem(USERS_KEY)) || []; } catch(e){ return []; }
}
function saveUsers(users){ localStorage.setItem(USERS_KEY, JSON.stringify(users)); }

function loadSession(){
  try{ return JSON.parse(localStorage.getItem(SESSION_KEY)); } catch(e){ return null; }
}
function saveSession(user){ localStorage.setItem(SESSION_KEY, JSON.stringify(user)); currentUser = user; updateUserArea(); }

function registerUser(){
  const name = document.getElementById("reg-name").value.trim();
  const email = document.getElementById("reg-email").value.trim().toLowerCase();
  const password = document.getElementById("reg-password").value;

  if(!name || !email || password.length < 4){
    regMsg.textContent = "Remplis tous les champs (mot de passe ≥4 caractères).";
    regMsg.style.color = "red"; return;
  }

  const users = loadUsers();
  if(users.find(u => u.email === email)){
    regMsg.textContent = "Un compte existe déjà pour cet email."; regMsg.style.color = "red"; return;
  }
  // Pour simplicité, on stocke password en clair localement (⚠️ pas sûr pour prod)
  users.push({ name, email, password });
  saveUsers(users);
  regMsg.textContent = "Compte créé — connecte-toi."; regMsg.style.color = "green";
  // auto switch to login
  showLogin();
}

function login(){
  const email = document.getElementById("login-email").value.trim().toLowerCase();
  const password = document.getElementById("login-password").value;
  const users = loadUsers();
  const user = users.find(u => u.email === email && u.password === password);
  if(!user){
    loginMsg.textContent = "Email ou mot de passe incorrect."; loginMsg.style.color = "red"; return;
  }
  saveSession({ name: user.name, email: user.email });
  loginMsg.textContent = "Connecté !"; loginMsg.style.color = "green";
  renderProducts();
  renderCart();
}

/* Logout */
function logout(){
  localStorage.removeItem(SESSION_KEY);
  currentUser = null;
  updateUserArea();
  renderCart();
}

/* Update header user area */
function updateUserArea(){
  if(currentUser){
    userArea.innerHTML = `Salut, <strong>${escapeHtml(currentUser.name)}</strong> • <button class="nav-btn" onclick="logout()">Déconnexion</button>`;
  } else {
    userArea.innerHTML = `<button class="nav-btn" onclick="showLogin()">Connexion / Inscription</button>`;
  }
}

/* ---------- Store rendering ---------- */
function renderProducts(){
  storeSection.innerHTML = "";
  PRODUCTS.forEach(p=>{
    const card = document.createElement("article");
    card.className = "product";
    card.innerHTML = `
      <img src="${p.img}" alt="${escapeHtml(p.title)}" loading="lazy" />
      <h4>${escapeHtml(p.title)}</h4>
      <div class="price">${(p.price_cents/100).toFixed(2)} €</div>
      <div class="small">Livraison rapide • Garantie 2 ans</div>
      <div style="margin-top:12px;">
        <button class="primary" onclick="addToCart('${p.id}')">Ajouter au panier</button>
        <button style="margin-left:8px" onclick="viewDetails('${p.id}')">Voir</button>
      </div>
    `;
    storeSection.appendChild(card);
  });
  updateUserArea();
}

/* Quick product view (modal-like) */
function viewDetails(id){
  const p = PRODUCTS.find(x=>x.id===id);
  if(!p) return;
  const w = window.open("", "_blank", "width=520,height=640");
  w.document.title = p.title;
  w.document.body.style.fontFamily = "Arial, sans-serif";
  w.document.body.innerHTML = `
    <div style="padding:18px;text-align:center;">
      <h2>${escapeHtml(p.title)}</h2>
      <img src="${p.img}" style="width:100%;height:auto;border-radius:10px;margin:12px 0" />
      <p style="font-weight:700">${(p.price_cents/100).toFixed(2)} €</p>
      <p class="muted">Description : Audio haute fidélité, réduction de bruit (simulée).</p>
      <button id="buyBtn" style="padding:10px 14px;border-radius:8px;background:#27ae60;color:#fff;border:0;cursor:pointer">Ajouter au panier</button>
    </div>
  `;
  w.document.getElementById("buyBtn").addEventListener("click", ()=>{
    if(!currentUser){ alert("Connecte-toi d'abord pour acheter."); return; }
    cart.push(p); saveCart(); w.close(); renderCart();
  });
}

/* ---------- Cart logic ---------- */
function loadCart(){
  try{ return JSON.parse(localStorage.getItem(`novashop_cart_${currentUser ? currentUser.email : 'guest'}`)) || []; } catch(e){ return []; }
}
function saveCart(){
  localStorage.setItem(`novashop_cart_${currentUser ? currentUser.email : 'guest'}`, JSON.stringify(cart));
  updateCartCount();
}

function addToCart(id){
  if(!currentUser){
    alert("Tu dois être connecté pour ajouter des produits. Crée un compte ou connecte-toi.");
    return;
  }
  const p = PRODUCTS.find(x=>x.id===id);
  if(!p) return;
  cart.push(p);
  saveCart();
  renderCart();
}

/* Remove and change qty (we store duplicates as separate items for simplicity; add more logic if you prefer quantities) */
function removeFromCart(index){
  cart.splice(index,1);
  saveCart();
  renderCart();
}

function computeTotals(){
  let subtotal = 0;
  cart.forEach(p => subtotal += p.price_cents);
  const tax = Math.round(subtotal * 0.20);
  const total = subtotal + tax;
  return { subtotal, tax, total };
}

function renderCart(){
  cart = loadCart();
  cartItemsDiv.innerHTML = "";
  if(cart.length === 0){
    cartItemsDiv.innerHTML = `<p class="small">Ton panier est vide.</p>`;
  } else {
    cart.forEach((p, idx) => {
      const row = document.createElement("p");
      row.innerHTML = `${escapeHtml(p.title)} <span> ${(p.price_cents/100).toFixed(2)} € 
        <button class="remove-btn" onclick="removeFromCart(${idx})">Supprimer</button></span>`;
      cartItemsDiv.appendChild(row);
    });
  }
  const t = computeTotals();
  subtotalEl.textContent = (t.subtotal/100).toFixed(2) + " €";
  taxEl.textContent = (t.tax/100).toFixed(2) + " €";
  totalEl.textContent = (t.total/100).toFixed(2) + " €";
  renderPayPalButton(t.total);
  updateCartCount();
}

/* Update small cart count in header */
function updateCartCount(){
  const count = cart.length;
  cartCountSpan.textContent = count;
}

/* Render PayPal button. Always render the button, but disable if not logged in or total=0 */
let paypalRendered = false;
function renderPayPalButton(totalCents){
  const container = document.getElementById("paypal-button-container");
  container.innerHTML = ""; // clear previous

  paypal.Buttons({
    style: { layout: 'vertical', color: 'blue', shape: 'rect', label: 'paypal' },
    onInit: function(data, actions) {
      if(!currentUser || totalCents === 0) actions.disable();
      // enable if both conditions satisfied later - handled by re-rendering
    },
    createOrder: function(data, actions) {
      if(!currentUser) { alert("Connecte-toi pour payer."); return; }
      if(totalCents === 0){ alert("Ton panier est vide."); return; }
      const totalEurosStr = (totalCents/100).toFixed(2);
      return actions.order.create({
        purchase_units: [{
          amount: { value: totalEurosStr },
          description: `Commande NovaShop - ${currentUser.email}`
        }]
      });
    },
    onApprove: function(data, actions) {
      return actions.order.capture().then(function(details) {
        // Sauvegarde commande côté client (exemple)
        const orders = JSON.parse(localStorage.getItem(ORDERS_KEY) || "[]");
        orders.push({
          id: data.orderID,
          payer: details.payer,
          total_cents: computeTotals().total,
          items: cart,
          date: new Date().toISOString(),
          user: currentUser ? currentUser.email : null
        });
        localStorage.setItem(ORDERS_KEY, JSON.stringify(orders));
        alert("Paiement accepté — merci " + (details.payer.name?.given_name || "") + " !");
        cart = [];
        saveCart();
        renderCart();
      });
    },
    onError: function(err){
      console.error("PayPal error", err);
      alert("Erreur PayPal: " + (err && err.message ? err.message : "voir console"));
    }
  }).render('#paypal-button-container');
}

/* ---------- Helpers ---------- */
function escapeHtml(str){
  if(!str) return "";
  return String(str).replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[s]));
}

/* ---------- Event bindings ---------- */
registerBtn.addEventListener("click", registerUser);
loginBtn.addEventListener("click", login);

/* Init on page load */
(function init(){
  // If session exists, set currentUser and load their cart
  if(currentUser){
    cart = loadCart();
  } else {
    cart = [];
  }
  renderProducts();
  renderCart();
  updateUserArea();
})();
